/// Generates a rem font-size and a baseline-compatible
/// unitless line-height from font-size value. Basic usage is simply:
///
///   @include font-size(1.25rem);
///
/// You can force a specific line-height by passing it as the second argument:
///
///   @include font-size(1rem, 1.5);
///
/// You can also modify the line-height by increments, while staying in the
/// baseline grid, by setting the `$modifier` parameter. It takes a positive
/// or negative number, and it will add or remove "lines" to the  generated
/// line-height. This is the recomended way to do it, unless you really need
/// an absolute value. i.e.:
///
///  // add 2 lines:
///   @include font-size(2rem, $modifier: +2);
///
///   // subtract -0.5 line:
///   @include font-size(0.875rem, $modifier: -0.5);
///
/// It is recommended to only add or subtract full integers or half steps.

@mixin font-size($font-size, $line-height: auto, $modifier: 0) {

	@if (type-of($font-size) != number) {
		@error "`#{$font-size}` needs to be a number.";
	}

	/// We provide font size in `rem` values.
	font-size: ($font-size / $global-font-size) * 1rem;

	@if ($line-height == "auto") {

		/// Define how many grid lines each text line should span.
		/// By default, we set it to the minimum number of lines necessary
		/// in order to contain the defined font-size, +1 for some breathing room.
		/// This can be modified with the `$modifier` parameter.
		$lines: ceil($font-size / $global-baseline) + $modifier + 1;
		$line-height: $lines * $global-baseline;

		line-height: ($line-height / $font-size);
	}

	@else {

		@if (type-of($line-height) == number or $line-height == "inherit" or $line-height == "normal") {
			line-height: $line-height;
		}

		@else if ($line-height != "none" and $line-height != false) {
			@error "Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`.";
		}

	}

}
